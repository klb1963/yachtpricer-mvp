generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Yacht {
  id                   String  @id @default(uuid())
  name                 String
  manufacturer         String
  model                String
  type                 String
  length               Float
  builtYear            Int
  cabins               Int
  heads                Int
  basePrice            Decimal
  location             String
  fleet                String
  charterCompany       String
  currentExtraServices Json

  imageUrl             String? 

  ownerId   String?
  ownerName String?
  owner     Owner?  @relation(fields: [ownerId], references: [id])

  weekSlots           WeekSlot[]
  extraServiceHistory ExtraServiceHistory[]
  competitorPrices    CompetitorPrice[]
  competitorSnapshots CompetitorSnapshot[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Owner {
  id     String  @id @default(uuid())
  name   String
  email  String  @unique
  phone  String?
  yachts Yacht[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WeekSlot {
  id      String @id @default(uuid())
  yacht   Yacht  @relation(fields: [yachtId], references: [id])
  yachtId String

  startDate       DateTime
  status          WeekSlotStatus
  currentPrice    Decimal
  currentDiscount Decimal

  priceHistory PriceHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([yachtId, startDate])
}

model PriceHistory {
  id         String   @id @default(uuid())
  weekSlot   WeekSlot @relation(fields: [weekSlotId], references: [id])
  weekSlotId String

  date     DateTime @default(now())
  price    Decimal
  discount Decimal
  authorId String?
  note     String?

  createdAt DateTime @default(now())
}

model ExtraServiceHistory {
  id      String @id @default(uuid())
  yacht   Yacht  @relation(fields: [yachtId], references: [id])
  yachtId String

  date        DateTime @default(now())
  serviceName String
  price       Decimal
  note        String?
  authorId    String?

  createdAt DateTime @default(now())
}

enum WeekSlotStatus {
  BOOKED
  OPEN
  OPTION
}

enum YachtType {
  monohull
  catamaran
  trimaran
  compromis
}

enum ScrapeSource {
  BOATAROUND
  SEARADAR
}

enum JobStatus {
  PENDING
  RUNNING
  DONE
  FAILED
}

model CompetitorPrice {
  id              String        @id @default(uuid())
  yacht           Yacht?        @relation(fields: [yachtId], references: [id])
  yachtId         String?

  // –Ω–µ–¥–µ–ª—è —á–∞—Ä—Ç–µ—Ä–Ω–∞—è (—Å—É–±–±–æ—Ç–∞)
  weekStart       DateTime
  source          ScrapeSource
 
  // –∫—Ç–æ –∏ —á—Ç–æ: –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
  competitorYacht String
  price           Decimal
  currency        String
  link            String
  scrapedAt       DateTime      @default(now())
  raw             Json?

  // üëá –Ω–æ–≤—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Boataround
  scrapeJob       ScrapeJob?    @relation(fields: [scrapeJobId], references: [id])
  scrapeJobId     String?

  externalId      String?       // ID –ª–æ–¥–∫–∏ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–µ—Å–ª–∏ —Å–º–æ–∂–µ–º –¥–æ—Å—Ç–∞—Ç—å)
  year            Int?
  cabins          Int?
  heads           Int?
  lengthFt        Float?        // —É–¥–æ–±–Ω–µ–µ —Å—Ä–∞–∑—É —Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ—É—Ç–∞—Ö
  marina          String?
  discountPct     Decimal?      // —Ä–µ–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –Ω–∞ –∏—Ç–æ–≥ –ø—Ä–æ—Ç–∏–≤ ‚Äú–ø—Ä–∞–π—Å–∞‚Äù
  feesTotal       Decimal?      // –¥–æ–ø. —Å–±–æ—Ä—ã (—á–∏—Å—Ç–∫–∞/—Ç—É—Ä–∏—Å—Ç.–Ω–∞–ª–æ–≥ –∏ —Ç.–ø.), –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ–º

  @@index([weekStart, source])
  @@index([yachtId, weekStart, source])
  // —á–∞—Å—Ç–æ —É–¥–æ–±–Ω–æ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ + –Ω–µ–¥–µ–ª—è + –∏—Å—Ç–æ—á–Ω–∏–∫:
  @@unique([source, link, weekStart])
}

model ScrapeJob {
  id          String      @id @default(uuid())
  source      ScrapeSource
  status      JobStatus
  params      Json
  createdAt   DateTime    @default(now())
  startedAt   DateTime?
  finishedAt  DateTime?
  error       String?

  // üëá —Å–≤—è–∑—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
  results     CompetitorPrice[]
}

enum DecisionStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

model CompetitorSnapshot {
  id          String       @id @default(uuid())

  yacht       Yacht        @relation(fields: [yachtId], references: [id])
  yachtId     String

  weekStart   DateTime
  source      ScrapeSource
  top1Price   Decimal
  top3Avg     Decimal
  currency    String
  sampleSize  Int
  rawStats    Json?
  collectedAt DateTime     @default(now())
  createdAt   DateTime     @default(now())

  @@unique([yachtId, weekStart, source])
  @@index([yachtId, weekStart])
}

model PricingDecision {
  id          String         @id @default(uuid())
  yachtId     String
  weekStart   DateTime
  basePrice   Decimal
  top1        Decimal?
  top3        Decimal?
  mlReco      Decimal?
  discountPct Decimal?
  finalPrice  Decimal?
  status      DecisionStatus @default(DRAFT)
  approvedBy  String?
  approvedAt  DateTime?
  notes       String?
  auditJson   Json?

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([yachtId, weekStart])
}