generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique

  // –∫–æ–Ω—Ç–∞–∫—Ç—ã
  contactName   String?
  contactPhone  String?
  contactEmail  String?
  websiteUrl    String?

  yachts        Yacht[]
  subscription  Subscription?
  createdAt     DateTime @default(now())
}


model Subscription {
  id             String   @id @default(cuid())
  orgId          String   @unique
  org            Organization @relation(fields: [orgId], references: [id])

  plan           String   @default("PRO") // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ enum –ø–æ–∑–∂–µ
  status         String   @default("active")
  currentPeriodEnd DateTime?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Yacht {
  id                   String  @id @default(uuid())
  nausysId             String? @unique // üëà –≤–Ω–µ—à–Ω–∏–π ID NauSYS

  name                 String
  manufacturer         String
  model                String
  type                 YachtType   @default(monohull)
  length               Float
  builtYear            Int
  cabins               Int
  heads                Int
  basePrice            Decimal     @db.Decimal(12, 2)
  location             String
  fleet                String
  charterCompany       String
  currentExtraServices Json

  imageUrl             String? 

  orgId String?
  org   Organization? @relation(fields: [orgId], references: [id])

  ownerId   String?
  ownerName String?
  owner     Owner?  @relation(fields: [ownerId], references: [id])

  weekSlots           WeekSlot[]
  extraServiceHistory ExtraServiceHistory[]
  competitorPrices    CompetitorPrice[]
  competitorSnapshots CompetitorSnapshot[]
  pricingDecisions    PricingDecision[]   

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("yachts")
  @@index([manufacturer, model])
  @@index([location])
}

model Owner {
  id     String  @id @default(uuid())
  name   String
  email  String  @unique
  phone  String?
  yachts Yacht[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("owners")
}

model WeekSlot {
  id      String @id @default(uuid())
  yacht   Yacht  @relation(fields: [yachtId], references: [id])
  yachtId String

  startDate       DateTime
  status          WeekSlotStatus
  currentPrice    Decimal     @db.Decimal(12, 2)
  currentDiscount Decimal     @db.Decimal(12, 2)

  priceHistory PriceHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([yachtId, startDate])
  @@index([yachtId, startDate])
  @@map("week_slots")
}

model PriceHistory {
  id         String   @id @default(uuid())
  weekSlot   WeekSlot @relation(fields: [weekSlotId], references: [id])
  weekSlotId String

  date     DateTime     @default(now())
  price    Decimal      @db.Decimal(12, 2)
  discount Decimal      @db.Decimal(12, 2)
  authorId String?
  note     String?

  createdAt DateTime @default(now())
  @@map("price_history")
}

model ExtraServiceHistory {
  id      String @id @default(uuid())
  yacht   Yacht  @relation(fields: [yachtId], references: [id])
  yachtId String

  date        DateTime @default(now())
  serviceName String
  price       Decimal     @db.Decimal(12, 2)
  note        String?
  authorId    String?

  createdAt DateTime @default(now())
  @@map("extra_service_history")
}

enum WeekSlotStatus {
  BOOKED
  OPEN
  OPTION
}

enum YachtType {
  monohull
  catamaran
  trimaran
  compromis
}

enum ScrapeSource {
  BOATAROUND
  SEARADAR
}

enum JobStatus {
  PENDING
  RUNNING
  DONE
  FAILED
}

model CompetitorPrice {
  id              String        @id @default(uuid())
  yacht           Yacht?        @relation(fields: [yachtId], references: [id])
  yachtId         String?

  // –Ω–µ–¥–µ–ª—è —á–∞—Ä—Ç–µ—Ä–Ω–∞—è (—Å—É–±–±–æ—Ç–∞)
  weekStart       DateTime
  source          ScrapeSource
 
  // –∫—Ç–æ –∏ —á—Ç–æ: –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
  competitorYacht String
  price           Decimal       @db.Decimal(12, 2)
  currency        String
  link            String
  scrapedAt       DateTime      @default(now())
  raw             Json?

  // üëá –Ω–æ–≤—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Boataround
  scrapeJob       ScrapeJob?    @relation(fields: [scrapeJobId], references: [id])
  scrapeJobId     String?

  externalId      String?       // ID –ª–æ–¥–∫–∏ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–µ—Å–ª–∏ —Å–º–æ–∂–µ–º –¥–æ—Å—Ç–∞—Ç—å)
  year            Int?
  cabins          Int?
  heads           Int?
  lengthFt        Float?        // —É–¥–æ–±–Ω–µ–µ —Å—Ä–∞–∑—É —Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ—É—Ç–∞—Ö
  marina          String?
  discountPct     Decimal?     @db.Decimal(12, 2) // —Ä–µ–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –Ω–∞ –∏—Ç–æ–≥ –ø—Ä–æ—Ç–∏–≤ ‚Äú–ø—Ä–∞–π—Å–∞‚Äù
  feesTotal       Decimal?     @db.Decimal(12, 2) // –¥–æ–ø. —Å–±–æ—Ä—ã (—á–∏—Å—Ç–∫–∞/—Ç—É—Ä–∏—Å—Ç.–Ω–∞–ª–æ–≥ –∏ —Ç.–ø.), –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ–º

  @@index([weekStart, source])
  @@index([yachtId, weekStart, source])
  // —á–∞—Å—Ç–æ —É–¥–æ–±–Ω–æ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ + –Ω–µ–¥–µ–ª—è + –∏—Å—Ç–æ—á–Ω–∏–∫:
  @@unique([source, link, weekStart])
  @@map("competitor_prices")
}

model ScrapeJob {
  id          String      @id @default(uuid())
  source      ScrapeSource
  status      JobStatus
  params      Json
  createdAt   DateTime    @default(now())
  startedAt   DateTime?
  finishedAt  DateTime?
  error       String?

  // üëá —Å–≤—è–∑—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
  results     CompetitorPrice[]
   @@map("scrape_jobs")
}

enum DecisionStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

model CompetitorSnapshot {
  id          String       @id @default(uuid())

  yacht       Yacht        @relation(fields: [yachtId], references: [id])
  yachtId     String

  weekStart   DateTime
  source      ScrapeSource
  top1Price   Decimal       @db.Decimal(12, 2)
  top3Avg     Decimal       @db.Decimal(12, 2)
  currency    String
  sampleSize  Int
  rawStats    Json?
  collectedAt DateTime     @default(now())
  createdAt   DateTime     @default(now())

  @@unique([yachtId, weekStart, source])
  @@index([yachtId, weekStart])
  @@map("competitor_snapshots")
}

model PricingDecision {
  id          String         @id @default(uuid())
  yachtId     String
  yacht       Yacht?         @relation(fields: [yachtId], references: [id]) 
  weekStart   DateTime
  basePrice   Decimal        @db.Decimal(12, 2)
  top1        Decimal?       @db.Decimal(12, 2)
  top3        Decimal?       @db.Decimal(12, 2)
  mlReco      Decimal?       @db.Decimal(12, 2)
  discountPct Decimal?       @db.Decimal(12, 2)
  finalPrice  Decimal?       @db.Decimal(12, 2)
  status      DecisionStatus @default(DRAFT)
  approvedBy  String?
  approvedAt  DateTime?
  notes       String?
  auditJson   Json?

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([yachtId, weekStart])
  @@index([weekStart])  // üëà –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –Ω–µ–¥–µ–ª–µ
  @@index([status])     // üëà –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ —Å—Ç–∞—Ç—É—Å—É
  @@map("pricing_decisions")
}