generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ─────────────────────────────────────────────────────────────
/// ENUMS
/// ─────────────────────────────────────────────────────────────

enum WeekSlotStatus {
  BOOKED
  OPEN
  OPTION
}

enum YachtType {
  monohull
  catamaran
  trimaran
  compromis
}

enum ScrapeSource {
  BOATAROUND
  SEARADAR
  NAUSYS
  INNERDB
}

enum JobStatus {
  PENDING
  RUNNING
  DONE
  FAILED
}

enum DecisionStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

// --- RBAC: роли пользователей ---
enum Role {
  ADMIN
  FLEET_MANAGER
  MANAGER
  OWNER
}

// --- Режимы владельца для конкретной яхты ---
enum OwnerMode {
  ACTIVE
  VIEW_ONLY
  HIDDEN
}

// --- Аудит действий по workflow PricingDecision ---
enum AuditAction {
  SUBMIT
  APPROVE
  REJECT
}

enum FilterScope {
  ORG // фильтры по умолчанию для всей орг.
  USER // персональное переопределение
}

enum LocationSource {
  NAUSYS
  INTERNAL
}

enum PriceSource {
  INTERNAL
  NAUSYS
  BOOKING_MANAGER
  OTHER
}

/// ─────────────────────────────────────────────────────────────
/// MODELS
/// ─────────────────────────────────────────────────────────────

model Organization {
  id   String @id @default(cuid())
  name String
  slug String @unique

  // контакты
  contactName  String?
  contactPhone String?
  contactEmail String?
  websiteUrl   String?

  yachts       Yacht[]
  subscription Subscription?

  users       User[]
  ownerYachts OwnerYacht[] @relation("OrgOwnerYachts")

  // 👇 обратная сторона связи к CompetitorFilters
  competitorFilters CompetitorFilters[]

  createdAt DateTime @default(now())
}

model Subscription {
  id    String       @id @default(cuid())
  orgId String       @unique
  org   Organization @relation(fields: [orgId], references: [id])

  plan             String    @default("PRO") // можно заменить на enum позже
  status           String    @default("active")
  currentPeriodEnd DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Yacht {
  id       String  @id @default(uuid())
  nausysId String? @unique // 👈 внешний ID NauSYS

  name                 String
  manufacturer         String
  model                String
  type                 YachtType? 
  length               Float
  builtYear            Int
  cabins               Int
  heads                Int
  basePrice            Decimal   @db.Decimal(12, 2)
  maxDiscountPct       Decimal?  @db.Decimal(5, 2)
  location             String?
  fleet                String
  charterCompany       String
  currentExtraServices Json
  imageUrl String?

  // --- связи со справочниками ---
  countryId  String?
  country    Country?       @relation(fields: [countryId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  categoryId Int?
  category   YachtCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  builderId  Int?
  builder    YachtBuilder?  @relation(fields: [builderId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  orgId String?
  org   Organization? @relation(fields: [orgId], references: [id])

  managerLinks ManagerYacht[]

  ownerLinks OwnerYacht[] @relation("OwnerYachtToYacht")

  ownerId   String?
  ownerName String?
  owner     Owner?  @relation(fields: [ownerId], references: [id])

  weekSlots           WeekSlot[]
  extraServiceHistory ExtraServiceHistory[]
  competitorPrices    CompetitorPrice[]
  competitorSnapshots CompetitorSnapshot[]
  pricingDecisions    PricingDecision[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([manufacturer, model])
  @@index([location])
  @@map("yachts")
}

model Owner {
  id     String  @id @default(uuid())
  name   String
  email  String  @unique
  phone  String?
  yachts Yacht[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("owners")
}

model WeekSlot {
  id      String @id @default(uuid())
  yacht   Yacht  @relation(fields: [yachtId], references: [id])
  yachtId String

  startDate DateTime
  status    WeekSlotStatus

  // Фактическая текущая цена/скидка на текущую неделю (это "Actual price")
  currentPrice    Decimal @db.Decimal(12, 2)
  currentDiscount Decimal @db.Decimal(5, 2)

  // НОВОЕ: откуда взяли цену и когда
  priceSource    PriceSource?
  priceFetchedAt DateTime?

  priceHistory PriceHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([yachtId, startDate])
  @@index([yachtId, startDate])
  @@map("week_slots")
}

model PriceHistory {
  id         String   @id @default(uuid())
  weekSlot   WeekSlot @relation(fields: [weekSlotId], references: [id])
  weekSlotId String

  date     DateTime @default(now())
  price    Decimal  @db.Decimal(12, 2)
  discount Decimal  @db.Decimal(12, 2)

  // НОВОЕ: источник записи
  source PriceSource?

  authorId String?
  note     String?

  createdAt DateTime @default(now())

  @@map("price_history")
}

model ExtraServiceHistory {
  id      String @id @default(uuid())
  yacht   Yacht  @relation(fields: [yachtId], references: [id])
  yachtId String

  date        DateTime @default(now())
  serviceName String
  price       Decimal  @db.Decimal(12, 2)
  note        String?
  authorId    String?

  createdAt DateTime @default(now())

  @@map("extra_service_history")
}

model CompetitorPrice {
  id      String  @id @default(uuid())
  yacht   Yacht?  @relation(fields: [yachtId], references: [id])
  yachtId String?

  // неделя чартерная (суббота)
  weekStart DateTime
  source    ScrapeSource

  // кто и что: базовые поля
  competitorYacht String
  price           Decimal  @db.Decimal(12, 2)
  currency        String
  link            String
  scrapedAt       DateTime @default(now())
  raw             Json?

  // 👇 новые полезные поля для Boataround
  scrapeJob   ScrapeJob? @relation(fields: [scrapeJobId], references: [id])
  scrapeJobId String?

  externalId  String? // ID лодки у поставщика (если сможем достать)
  year        Int?
  cabins      Int?
  heads       Int?
  lengthFt    Float? // удобнее сразу хранить в футах
  marina      String?
  discountPct Decimal? @db.Decimal(12, 2) // реальная скидка на итог против “прайса”
  feesTotal   Decimal? @db.Decimal(12, 2) // доп. сборы (чистка/турист.налог и т.п.), если считаем

  // часто удобно дедуплицировать по ссылке + неделя + источник:
  @@unique([source, link, weekStart])
  @@index([weekStart, source])
  @@index([yachtId, weekStart, source])
  @@map("competitor_prices")
}

model ScrapeJob {
  id         String       @id @default(uuid())
  source     ScrapeSource
  status     JobStatus
  params     Json
  createdAt  DateTime     @default(now())
  startedAt  DateTime?
  finishedAt DateTime?
  error      String?

  // 👇 связь к результатам
  results CompetitorPrice[]

  @@map("scrape_jobs")
}

model CompetitorSnapshot {
  id String @id @default(uuid())

  yacht   Yacht  @relation(fields: [yachtId], references: [id])
  yachtId String

  weekStart   DateTime
  source      ScrapeSource
  top1Price   Decimal      @db.Decimal(12, 2)
  top3Avg     Decimal      @db.Decimal(12, 2)
  currency    String
  sampleSize  Int
  rawStats    Json?
  collectedAt DateTime     @default(now())
  createdAt   DateTime     @default(now())

  @@unique([yachtId, weekStart, source])
  @@index([yachtId, weekStart])
  @@map("competitor_snapshots")
}

model PricingDecision {
  id          String         @id @default(uuid())
  yachtId     String
  yacht       Yacht?         @relation(fields: [yachtId], references: [id])
  weekStart   DateTime
  basePrice   Decimal        @db.Decimal(12, 2)
  top1        Decimal?       @db.Decimal(12, 2)
  top3        Decimal?       @db.Decimal(12, 2)
  mlReco      Decimal?       @db.Decimal(12, 2)
  discountPct Decimal?       @db.Decimal(12, 2)
  finalPrice  Decimal?       @db.Decimal(12, 2)
  status      DecisionStatus @default(DRAFT)
  approvedBy  String?
  approvedAt  DateTime?
  notes       String?
  auditJson   Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLogs PriceAuditLog[] @relation("DecisionAuditLogs")

  @@unique([yachtId, weekStart])
  @@index([weekStart]) // 👈 быстрый доступ по неделе
  @@index([status]) // 👈 быстрый доступ по статусу
  @@map("pricing_decisions")
}

// --- Пользователь системы (идентификатор может быть clerkId/oidc sub) ---
model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?
  role  Role

  // Организация по умолчанию (есть DEFAULT_ORG_SLUG=aquatoria)
  orgId String?
  org   Organization? @relation(fields: [orgId], references: [id])

  // связи
  // 👇 обратная сторона связи CompetitorFilters.user
  competitorFilters CompetitorFilters[]
  managerLinks      ManagerYacht[]
  ownerLinks        OwnerYacht[]
  auditLogs         PriceAuditLog[]     @relation("AuditActor")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// --- Привязка менеджера к яхте (кто «ведёт» конкретную яхту) ---
model ManagerYacht {
  id        String @id @default(cuid())
  managerId String
  yachtId   String

  manager User  @relation(fields: [managerId], references: [id])
  yacht   Yacht @relation(fields: [yachtId], references: [id])

  @@unique([managerId, yachtId])
  @@index([yachtId])
  @@map("manager_yachts")
}

// --- Привязка владельца (user с ролью OWNER) к яхте + режим доступа ---
model OwnerYacht {
  id      String @id @default(cuid())
  ownerId String
  yachtId String

  // Если хочешь строго ограничивать в пределах org
  orgId String?
  // 👇 даём имя связи между OwnerYacht ↔ Organization
  org   Organization? @relation("OrgOwnerYachts", fields: [orgId], references: [id])

  owner User @relation(fields: [ownerId], references: [id])

  // 👇 даём имя связи между OwnerYacht ↔ Yacht
  yacht Yacht @relation("OwnerYachtToYacht", fields: [yachtId], references: [id])

  mode      OwnerMode @default(VIEW_ONLY)
  allowEdit Boolean   @default(false)

  @@unique([ownerId, yachtId])
  @@index([yachtId])
  @@map("owner_yachts")
}

model PriceAuditLog {
  id String @id @default(cuid())

  decisionId String

  decision PricingDecision @relation("DecisionAuditLogs", fields: [decisionId], references: [id])

  action     AuditAction
  fromStatus DecisionStatus?
  toStatus   DecisionStatus

  actorId String?
  actor   User?   @relation("AuditActor", fields: [actorId], references: [id])

  comment   String?
  createdAt DateTime @default(now())

  @@index([decisionId])
  @@index([actorId])
  @@map("price_audit_logs")
}

// Справочник стран из NauSYS
model Country {
  id        String   @id @default(cuid())
  nausysId  Int      @unique // ID из /countries
  code2     String   @unique @db.Char(2) // ISO-3166-1 alpha-2 (FR)
  code3     String?  @db.Char(3) // ISO-3166-1 alpha-3 (FRA)
  name      String // "France"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 👇 обратная сторона связи по ISO-2
  locations         Location[]          @relation("CountryCode2Locations")
  regions           Region[]            @relation("RegionCountryNausys")
  competitorFilters CompetitorFilters[] @relation("FiltersCountries")

  yachts            Yacht[]

  @@index([name])
  @@map("countries")
}

model Location {
  id          String         @id @default(cuid())
  source      LocationSource @default(NAUSYS)
  externalId  String? // например, locationId из NauSYS (как строка)
  code        String?
  name        String
  countryCode String?        @db.Char(2) // ISO-2
  lat         Float? // NEW
  lon         Float? // NEW
  parentId    String?
  parent      Location?      @relation("LocationToChildren", fields: [parentId], references: [id])
  children    Location[]     @relation("LocationToChildren")

  competitorFilters CompetitorFilters[] @relation("FiltersLocations")
  aliases           LocationAlias[]     @relation("LocationAliases")

  // 👇 связь на Country по code2 (уникальное поле — это ок)
  country Country? @relation("CountryCode2Locations", fields: [countryCode], references: [code2])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([source, externalId])
  @@index([source])
  @@index([countryCode])
  @@map("locations")
}

model LocationAlias {
  id         String @id @default(cuid())
  alias      String
  normalized String
  locationId String

  // 👇 связали с именованной связью "LocationAliases"
  location Location @relation("LocationAliases", fields: [locationId], references: [id])

  @@unique([normalized])
  @@index([locationId])
  @@map("location_aliases")
}

model CompetitorFilters {
  id String @id @default(cuid())

  orgId String
  org   Organization @relation(fields: [orgId], references: [id])

  scope FilterScope @default(ORG)

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  lenFtMinus  Int @default(3)
  lenFtPlus   Int @default(3)
  yearMinus   Int @default(2)
  yearPlus    Int @default(2)
  peopleMinus Int @default(1)
  peoplePlus  Int @default(1)
  cabinsMinus Int @default(1)
  cabinsPlus  Int @default(1)
  headsMin    Int @default(0)

  locations Location[] @relation("FiltersLocations")

  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NEW: m2m как с Locations
  categories YachtCategory[] @relation("FiltersCategories")
  builders   YachtBuilder[]  @relation("FiltersBuilders")
  models     YachtModel[]    @relation("FiltersModels")
  regions    Region[]        @relation("FiltersRegions")
  countries  Country[]       @relation("FiltersCountries")

  @@unique([orgId, scope, userId])
  @@index([scope])
  @@index([orgId])
  @@index([userId])
  @@map("competitor_filters")
}

// Справочник категорий яхт из NauSYS
model YachtCategory {
  id       Int     @id @default(autoincrement())
  nausysId Int     @unique
  names    Json
  nameEn   String? @map("name_en")
  nameDe   String? @map("name_de")
  nameRu   String? @map("name_ru")

  models YachtModel[] @relation("CategoryModels")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  competitorFilters CompetitorFilters[] @relation("FiltersCategories")

  yachts Yacht[]

  @@map("yacht_categories")
}

// Справочник производителей из NauSYS
model YachtBuilder {
  id       Int    @id @default(autoincrement())
  /// ID производителя в NauSYS (поле `builders[].id`), уникален
  nausysId Int    @unique
  /// Имя производителя (поле `builders[].name`)
  name     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Cвязь на модели яхт
  models YachtModel[]

  competitorFilters CompetitorFilters[] @relation("FiltersBuilders")

  yachts Yacht[]

  @@index([name])
  @@map("yacht_builders")
}

// Справочник моделей яхт из NauSYS
model YachtModel {
  id       Int    @id @default(autoincrement())
  nausysId Int    @unique
  name     String

  builderId Int?
  builder   YachtBuilder? @relation(fields: [builderId], references: [id])

  categoryId Int?
  category   YachtCategory? @relation("CategoryModels", fields: [categoryId], references: [id])

  loa           Decimal? @db.Decimal(6, 2)
  beam          Decimal? @db.Decimal(5, 2)
  draft         Decimal? @db.Decimal(4, 2)
  cabins        Int?
  wc            Int?
  waterTank     Int?
  fuelTank      Int?
  displacement  Int?
  virtualLength Int?

  competitorFilters CompetitorFilters[] @relation("FiltersModels")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([builderId])
  @@index([categoryId])
  @@map("yacht_models")
}

model Region {
  id       Int     @id @default(autoincrement())
  nausysId Int     @unique
  names    Json
  nameEn   String? @map("name_en")
  nameDe   String? @map("name_de")
  nameRu   String? @map("name_ru")

  // связь на Country по уникальному полю countries.nausysId
  countryNausysId Int?
  country         Country? @relation("RegionCountryNausys", fields: [countryNausysId], references: [nausysId])

  competitorFilters CompetitorFilters[] @relation("FiltersRegions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([countryNausysId])
  @@map("regions")
}
