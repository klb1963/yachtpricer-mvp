// frontend/src/api/pricingDecisions.ts

// üîß –æ–±—â–∏–π API-–±–∞–∑–∏—Å
const API = import.meta.env.VITE_API_URL ?? '/api';

export type DecisionStatus = 'DRAFT' | 'SUBMITTED' | 'APPROVED' | 'REJECTED';

export type PricingDecision = {
  id: string;
  yachtId: string;
  weekStart: string; // ISO string
  basePrice: string;
  top1?: string | null;
  top3?: string | null;
  mlReco?: string | null;
  discountPct?: string | null;
  finalPrice?: string | null;
  status: DecisionStatus;
  approvedBy?: string | null;
  approvedAt?: string | null;
  notes?: string | null;
};

export type Perms = {
  canView: boolean;
  canSubmit: boolean;
  canApproveOrReject: boolean;
};

// üëâ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –ø—Ä–∞–≤–∞–º–∏ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç—ë—Ä–∞
export async function getDecisionWithPerms(decisionId: string, actorId: string) {
  const r = await fetch(
    `${API}/pricing-decisions/${decisionId}/with-perms?actorId=${encodeURIComponent(actorId)}`
  );
  if (!r.ok) throw new Error(`Failed to load decision: ${r.status}`);
  return (await r.json()) as { decision: PricingDecision; perms: Perms };
}

// üëâ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–∑ DRAFT/REJECTED ‚Üí SUBMITTED
export async function submitDecision(decisionId: string, actorId: string) {
  const r = await fetch(`${API}/pricing-decisions/${decisionId}/submit`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ actorId }),
  });
  if (!r.ok) throw new Error(`Submit failed: ${r.status}`);
  return (await r.json()) as PricingDecision;
}

// üëâ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–∑ SUBMITTED ‚Üí APPROVED
export async function approveDecision(decisionId: string, actorId: string) {
  const r = await fetch(`${API}/pricing-decisions/${decisionId}/approve`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ actorId }),
  });
  if (!r.ok) throw new Error(`Approve failed: ${r.status}`);
  return (await r.json()) as PricingDecision;
}

// üëâ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–∑ SUBMITTED ‚Üí REJECTED (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω comment)
export async function rejectDecision(decisionId: string, actorId: string, comment: string) {
  const r = await fetch(`${API}/pricing-decisions/${decisionId}/reject`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ actorId, comment }),
  });
  if (!r.ok) throw new Error(`Reject failed: ${r.status}`);
  return (await r.json()) as PricingDecision;
}