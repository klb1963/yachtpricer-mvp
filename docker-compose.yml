version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
    working_dir: /app
    command: npm run dev -- --host 0.0.0.0 --port 3000
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    networks:
      - yachtpricer-net

  backend:
    build:
      context: ./backend
    working_dir: /app
    entrypoint: ["sh", "/app/entrypoint.dev.sh"]  # здесь и tsc --watch, и nest
    ports:
      - "8000:8000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgres://postgres:postgres@db:5432/yachtpricer
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - yachtpricer-net

  db:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: yachtpricer
    volumes:
      - ./db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d yachtpricer"]
      interval: 3s
      timeout: 3s
      retries: 20
    networks:
      - yachtpricer-net

  prisma-studio:
    build:
      context: ./backend
    working_dir: /app
    command: npx prisma studio --port 5555
    ports:
      - "5556:5555"                   # снаружи 5556, внутри 5555
    environment:
      NODE_ENV: development
      DATABASE_URL: postgres://postgres:postgres@db:5432/yachtpricer
    depends_on:
      db:
        condition: service_healthy
    networks:
      - yachtpricer-net

networks:
  yachtpricer-net:
    driver: bridge

volumes:
  backend_node_modules: {}
  frontend_node_modules: {}