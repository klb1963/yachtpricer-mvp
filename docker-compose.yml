services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      VITE_API_URL: /api
      VITE_CLERK_PUBLISHABLE_KEY: "pk_test_ZXhjaXRpbmctbXVsZS0zMS5jbGVyay5hY2NvdW50cy5kZXYk"
    networks:
      - yachtpricer-net

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    working_dir: /app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@db:5432/yachtpricer
      CORS_ORIGINS: https://sandbox.leonidk.de
      NAUSYS_USE_MOCK: "true"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - yachtpricer-net
    healthcheck:                # ðŸ‘ˆ Ñ‚ÐµÐ¿ÐµÑ€ÑŒ Ð²Ð½ÑƒÑ‚Ñ€Ð¸ backend
      test:
        [
          "CMD-SHELL",
          "node -e \"require('http').get('http://localhost:8000/api/health',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  db:
    image: postgres:14
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: yachtpricer
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d yachtpricer"]
      interval: 3s
      timeout: 3s
      retries: 20
    networks:
      - yachtpricer-net

networks:
  yachtpricer-net:
    driver: bridge